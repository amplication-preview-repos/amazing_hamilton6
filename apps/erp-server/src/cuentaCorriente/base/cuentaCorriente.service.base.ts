/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CuentaCorriente as PrismaCuentaCorriente,
} from "@prisma/client";

export class CuentaCorrienteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CuentaCorrienteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cuentaCorriente.count(args);
  }

  async cuentaCorrientes<T extends Prisma.CuentaCorrienteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuentaCorrienteFindManyArgs>
  ): Promise<PrismaCuentaCorriente[]> {
    return this.prisma.cuentaCorriente.findMany<Prisma.CuentaCorrienteFindManyArgs>(
      args
    );
  }
  async cuentaCorriente<T extends Prisma.CuentaCorrienteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuentaCorrienteFindUniqueArgs>
  ): Promise<PrismaCuentaCorriente | null> {
    return this.prisma.cuentaCorriente.findUnique(args);
  }
  async createCuentaCorriente<T extends Prisma.CuentaCorrienteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuentaCorrienteCreateArgs>
  ): Promise<PrismaCuentaCorriente> {
    return this.prisma.cuentaCorriente.create<T>(args);
  }
  async updateCuentaCorriente<T extends Prisma.CuentaCorrienteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuentaCorrienteUpdateArgs>
  ): Promise<PrismaCuentaCorriente> {
    return this.prisma.cuentaCorriente.update<T>(args);
  }
  async deleteCuentaCorriente<T extends Prisma.CuentaCorrienteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CuentaCorrienteDeleteArgs>
  ): Promise<PrismaCuentaCorriente> {
    return this.prisma.cuentaCorriente.delete(args);
  }
}
