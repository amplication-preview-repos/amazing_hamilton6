/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CuentaCorriente } from "./CuentaCorriente";
import { CuentaCorrienteCountArgs } from "./CuentaCorrienteCountArgs";
import { CuentaCorrienteFindManyArgs } from "./CuentaCorrienteFindManyArgs";
import { CuentaCorrienteFindUniqueArgs } from "./CuentaCorrienteFindUniqueArgs";
import { CreateCuentaCorrienteArgs } from "./CreateCuentaCorrienteArgs";
import { UpdateCuentaCorrienteArgs } from "./UpdateCuentaCorrienteArgs";
import { DeleteCuentaCorrienteArgs } from "./DeleteCuentaCorrienteArgs";
import { CuentaCorrienteService } from "../cuentaCorriente.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CuentaCorriente)
export class CuentaCorrienteResolverBase {
  constructor(
    protected readonly service: CuentaCorrienteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CuentaCorriente",
    action: "read",
    possession: "any",
  })
  async _cuentaCorrientesMeta(
    @graphql.Args() args: CuentaCorrienteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CuentaCorriente])
  @nestAccessControl.UseRoles({
    resource: "CuentaCorriente",
    action: "read",
    possession: "any",
  })
  async cuentaCorrientes(
    @graphql.Args() args: CuentaCorrienteFindManyArgs
  ): Promise<CuentaCorriente[]> {
    return this.service.cuentaCorrientes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CuentaCorriente, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CuentaCorriente",
    action: "read",
    possession: "own",
  })
  async cuentaCorriente(
    @graphql.Args() args: CuentaCorrienteFindUniqueArgs
  ): Promise<CuentaCorriente | null> {
    const result = await this.service.cuentaCorriente(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CuentaCorriente)
  @nestAccessControl.UseRoles({
    resource: "CuentaCorriente",
    action: "create",
    possession: "any",
  })
  async createCuentaCorriente(
    @graphql.Args() args: CreateCuentaCorrienteArgs
  ): Promise<CuentaCorriente> {
    return await this.service.createCuentaCorriente({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CuentaCorriente)
  @nestAccessControl.UseRoles({
    resource: "CuentaCorriente",
    action: "update",
    possession: "any",
  })
  async updateCuentaCorriente(
    @graphql.Args() args: UpdateCuentaCorrienteArgs
  ): Promise<CuentaCorriente | null> {
    try {
      return await this.service.updateCuentaCorriente({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CuentaCorriente)
  @nestAccessControl.UseRoles({
    resource: "CuentaCorriente",
    action: "delete",
    possession: "any",
  })
  async deleteCuentaCorriente(
    @graphql.Args() args: DeleteCuentaCorrienteArgs
  ): Promise<CuentaCorriente | null> {
    try {
      return await this.service.deleteCuentaCorriente(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
