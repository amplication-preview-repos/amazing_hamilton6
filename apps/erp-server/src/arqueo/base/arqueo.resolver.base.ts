/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Arqueo } from "./Arqueo";
import { ArqueoCountArgs } from "./ArqueoCountArgs";
import { ArqueoFindManyArgs } from "./ArqueoFindManyArgs";
import { ArqueoFindUniqueArgs } from "./ArqueoFindUniqueArgs";
import { CreateArqueoArgs } from "./CreateArqueoArgs";
import { UpdateArqueoArgs } from "./UpdateArqueoArgs";
import { DeleteArqueoArgs } from "./DeleteArqueoArgs";
import { ArqueoService } from "../arqueo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Arqueo)
export class ArqueoResolverBase {
  constructor(
    protected readonly service: ArqueoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Arqueo",
    action: "read",
    possession: "any",
  })
  async _arqueosMeta(
    @graphql.Args() args: ArqueoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Arqueo])
  @nestAccessControl.UseRoles({
    resource: "Arqueo",
    action: "read",
    possession: "any",
  })
  async arqueos(@graphql.Args() args: ArqueoFindManyArgs): Promise<Arqueo[]> {
    return this.service.arqueos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Arqueo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Arqueo",
    action: "read",
    possession: "own",
  })
  async arqueo(
    @graphql.Args() args: ArqueoFindUniqueArgs
  ): Promise<Arqueo | null> {
    const result = await this.service.arqueo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Arqueo)
  @nestAccessControl.UseRoles({
    resource: "Arqueo",
    action: "create",
    possession: "any",
  })
  async createArqueo(@graphql.Args() args: CreateArqueoArgs): Promise<Arqueo> {
    return await this.service.createArqueo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Arqueo)
  @nestAccessControl.UseRoles({
    resource: "Arqueo",
    action: "update",
    possession: "any",
  })
  async updateArqueo(
    @graphql.Args() args: UpdateArqueoArgs
  ): Promise<Arqueo | null> {
    try {
      return await this.service.updateArqueo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Arqueo)
  @nestAccessControl.UseRoles({
    resource: "Arqueo",
    action: "delete",
    possession: "any",
  })
  async deleteArqueo(
    @graphql.Args() args: DeleteArqueoArgs
  ): Promise<Arqueo | null> {
    try {
      return await this.service.deleteArqueo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
