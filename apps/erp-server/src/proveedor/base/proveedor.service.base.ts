/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Proveedor as PrismaProveedor } from "@prisma/client";

export class ProveedorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProveedorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.proveedor.count(args);
  }

  async proveedors<T extends Prisma.ProveedorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProveedorFindManyArgs>
  ): Promise<PrismaProveedor[]> {
    return this.prisma.proveedor.findMany<Prisma.ProveedorFindManyArgs>(args);
  }
  async proveedor<T extends Prisma.ProveedorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProveedorFindUniqueArgs>
  ): Promise<PrismaProveedor | null> {
    return this.prisma.proveedor.findUnique(args);
  }
  async createProveedor<T extends Prisma.ProveedorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProveedorCreateArgs>
  ): Promise<PrismaProveedor> {
    return this.prisma.proveedor.create<T>(args);
  }
  async updateProveedor<T extends Prisma.ProveedorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProveedorUpdateArgs>
  ): Promise<PrismaProveedor> {
    return this.prisma.proveedor.update<T>(args);
  }
  async deleteProveedor<T extends Prisma.ProveedorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProveedorDeleteArgs>
  ): Promise<PrismaProveedor> {
    return this.prisma.proveedor.delete(args);
  }
}
