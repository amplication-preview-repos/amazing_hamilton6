/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Gasto } from "./Gasto";
import { GastoCountArgs } from "./GastoCountArgs";
import { GastoFindManyArgs } from "./GastoFindManyArgs";
import { GastoFindUniqueArgs } from "./GastoFindUniqueArgs";
import { CreateGastoArgs } from "./CreateGastoArgs";
import { UpdateGastoArgs } from "./UpdateGastoArgs";
import { DeleteGastoArgs } from "./DeleteGastoArgs";
import { GastoService } from "../gasto.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Gasto)
export class GastoResolverBase {
  constructor(
    protected readonly service: GastoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Gasto",
    action: "read",
    possession: "any",
  })
  async _gastosMeta(
    @graphql.Args() args: GastoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Gasto])
  @nestAccessControl.UseRoles({
    resource: "Gasto",
    action: "read",
    possession: "any",
  })
  async gastos(@graphql.Args() args: GastoFindManyArgs): Promise<Gasto[]> {
    return this.service.gastos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Gasto, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Gasto",
    action: "read",
    possession: "own",
  })
  async gasto(
    @graphql.Args() args: GastoFindUniqueArgs
  ): Promise<Gasto | null> {
    const result = await this.service.gasto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gasto)
  @nestAccessControl.UseRoles({
    resource: "Gasto",
    action: "create",
    possession: "any",
  })
  async createGasto(@graphql.Args() args: CreateGastoArgs): Promise<Gasto> {
    return await this.service.createGasto({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gasto)
  @nestAccessControl.UseRoles({
    resource: "Gasto",
    action: "update",
    possession: "any",
  })
  async updateGasto(
    @graphql.Args() args: UpdateGastoArgs
  ): Promise<Gasto | null> {
    try {
      return await this.service.updateGasto({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gasto)
  @nestAccessControl.UseRoles({
    resource: "Gasto",
    action: "delete",
    possession: "any",
  })
  async deleteGasto(
    @graphql.Args() args: DeleteGastoArgs
  ): Promise<Gasto | null> {
    try {
      return await this.service.deleteGasto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
